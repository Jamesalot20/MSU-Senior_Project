"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/form-data";
exports.ids = ["vendor-chunks/form-data"];
exports.modules = {

/***/ "(ssr)/../node_modules/form-data/lib/form_data.js":
/*!**************************************************!*\
  !*** ../node_modules/form-data/lib/form_data.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar CombinedStream = __webpack_require__(/*! combined-stream */ \"(ssr)/../node_modules/combined-stream/lib/combined_stream.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar parseUrl = (__webpack_require__(/*! url */ \"url\").parse);\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nvar mime = __webpack_require__(/*! mime-types */ \"(ssr)/../node_modules/mime-types/index.js\");\nvar asynckit = __webpack_require__(/*! asynckit */ \"(ssr)/../node_modules/asynckit/index.js\");\nvar populate = __webpack_require__(/*! ./populate.js */ \"(ssr)/../node_modules/form-data/lib/populate.js\");\n// Public API\nmodule.exports = FormData;\n// make it a Stream\nutil.inherits(FormData, CombinedStream);\n/**\r\n * Create readable \"multipart/form-data\" streams.\r\n * Can be used to submit forms\r\n * and file uploads to other web applications.\r\n *\r\n * @constructor\r\n * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream\r\n */ function FormData(options) {\n    if (!(this instanceof FormData)) {\n        return new FormData(options);\n    }\n    this._overheadLength = 0;\n    this._valueLength = 0;\n    this._valuesToMeasure = [];\n    CombinedStream.call(this);\n    options = options || {};\n    for(var option in options){\n        this[option] = options[option];\n    }\n}\nFormData.LINE_BREAK = \"\\r\\n\";\nFormData.DEFAULT_CONTENT_TYPE = \"application/octet-stream\";\nFormData.prototype.append = function(field, value, options) {\n    options = options || {};\n    // allow filename as single option\n    if (typeof options == \"string\") {\n        options = {\n            filename: options\n        };\n    }\n    var append = CombinedStream.prototype.append.bind(this);\n    // all that streamy business can't handle numbers\n    if (typeof value == \"number\") {\n        value = \"\" + value;\n    }\n    // https://github.com/felixge/node-form-data/issues/38\n    if (util.isArray(value)) {\n        // Please convert your array into string\n        // the way web server expects it\n        this._error(new Error(\"Arrays are not supported.\"));\n        return;\n    }\n    var header = this._multiPartHeader(field, value, options);\n    var footer = this._multiPartFooter();\n    append(header);\n    append(value);\n    append(footer);\n    // pass along options.knownLength\n    this._trackLength(header, value, options);\n};\nFormData.prototype._trackLength = function(header, value, options) {\n    var valueLength = 0;\n    // used w/ getLengthSync(), when length is known.\n    // e.g. for streaming directly from a remote server,\n    // w/ a known file a size, and not wanting to wait for\n    // incoming file to finish to get its size.\n    if (options.knownLength != null) {\n        valueLength += +options.knownLength;\n    } else if (Buffer.isBuffer(value)) {\n        valueLength = value.length;\n    } else if (typeof value === \"string\") {\n        valueLength = Buffer.byteLength(value);\n    }\n    this._valueLength += valueLength;\n    // @check why add CRLF? does this account for custom/multiple CRLFs?\n    this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;\n    // empty or either doesn't have path or not an http response or not a stream\n    if (!value || !value.path && !(value.readable && value.hasOwnProperty(\"httpVersion\")) && !(value instanceof Stream)) {\n        return;\n    }\n    // no need to bother with the length\n    if (!options.knownLength) {\n        this._valuesToMeasure.push(value);\n    }\n};\nFormData.prototype._lengthRetriever = function(value, callback) {\n    if (value.hasOwnProperty(\"fd\")) {\n        // take read range into a account\n        // `end` = Infinity â€“> read file till the end\n        //\n        // TODO: Looks like there is bug in Node fs.createReadStream\n        // it doesn't respect `end` options without `start` options\n        // Fix it when node fixes it.\n        // https://github.com/joyent/node/issues/7819\n        if (value.end != undefined && value.end != Infinity && value.start != undefined) {\n            // when end specified\n            // no need to calculate range\n            // inclusive, starts with 0\n            callback(null, value.end + 1 - (value.start ? value.start : 0));\n        // not that fast snoopy\n        } else {\n            // still need to fetch file size from fs\n            fs.stat(value.path, function(err, stat) {\n                var fileSize;\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                // update final size based on the range options\n                fileSize = stat.size - (value.start ? value.start : 0);\n                callback(null, fileSize);\n            });\n        }\n    // or http response\n    } else if (value.hasOwnProperty(\"httpVersion\")) {\n        callback(null, +value.headers[\"content-length\"]);\n    // or request stream http://github.com/mikeal/request\n    } else if (value.hasOwnProperty(\"httpModule\")) {\n        // wait till response come back\n        value.on(\"response\", function(response) {\n            value.pause();\n            callback(null, +response.headers[\"content-length\"]);\n        });\n        value.resume();\n    // something else\n    } else {\n        callback(\"Unknown stream\");\n    }\n};\nFormData.prototype._multiPartHeader = function(field, value, options) {\n    // custom header specified (as string)?\n    // it becomes responsible for boundary\n    // (e.g. to handle extra CRLFs on .NET servers)\n    if (typeof options.header == \"string\") {\n        return options.header;\n    }\n    var contentDisposition = this._getContentDisposition(value, options);\n    var contentType = this._getContentType(value, options);\n    var contents = \"\";\n    var headers = {\n        // add custom disposition as third element or keep it two elements if not\n        \"Content-Disposition\": [\n            \"form-data\",\n            'name=\"' + field + '\"'\n        ].concat(contentDisposition || []),\n        // if no content type. allow it to be empty array\n        \"Content-Type\": [].concat(contentType || [])\n    };\n    // allow custom headers.\n    if (typeof options.header == \"object\") {\n        populate(headers, options.header);\n    }\n    var header;\n    for(var prop in headers){\n        if (!headers.hasOwnProperty(prop)) continue;\n        header = headers[prop];\n        // skip nullish headers.\n        if (header == null) {\n            continue;\n        }\n        // convert all headers to arrays.\n        if (!Array.isArray(header)) {\n            header = [\n                header\n            ];\n        }\n        // add non-empty headers.\n        if (header.length) {\n            contents += prop + \": \" + header.join(\"; \") + FormData.LINE_BREAK;\n        }\n    }\n    return \"--\" + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\n};\nFormData.prototype._getContentDisposition = function(value, options) {\n    var filename, contentDisposition;\n    if (typeof options.filepath === \"string\") {\n        // custom filepath for relative paths\n        filename = path.normalize(options.filepath).replace(/\\\\/g, \"/\");\n    } else if (options.filename || value.name || value.path) {\n        // custom filename take precedence\n        // formidable and the browser add a name property\n        // fs- and request- streams have path property\n        filename = path.basename(options.filename || value.name || value.path);\n    } else if (value.readable && value.hasOwnProperty(\"httpVersion\")) {\n        // or try http response\n        filename = path.basename(value.client._httpMessage.path || \"\");\n    }\n    if (filename) {\n        contentDisposition = 'filename=\"' + filename + '\"';\n    }\n    return contentDisposition;\n};\nFormData.prototype._getContentType = function(value, options) {\n    // use custom content-type above all\n    var contentType = options.contentType;\n    // or try `name` from formidable, browser\n    if (!contentType && value.name) {\n        contentType = mime.lookup(value.name);\n    }\n    // or try `path` from fs-, request- streams\n    if (!contentType && value.path) {\n        contentType = mime.lookup(value.path);\n    }\n    // or if it's http-reponse\n    if (!contentType && value.readable && value.hasOwnProperty(\"httpVersion\")) {\n        contentType = value.headers[\"content-type\"];\n    }\n    // or guess it from the filepath or filename\n    if (!contentType && (options.filepath || options.filename)) {\n        contentType = mime.lookup(options.filepath || options.filename);\n    }\n    // fallback to the default content type if `value` is not simple value\n    if (!contentType && typeof value == \"object\") {\n        contentType = FormData.DEFAULT_CONTENT_TYPE;\n    }\n    return contentType;\n};\nFormData.prototype._multiPartFooter = function() {\n    return (function(next) {\n        var footer = FormData.LINE_BREAK;\n        var lastPart = this._streams.length === 0;\n        if (lastPart) {\n            footer += this._lastBoundary();\n        }\n        next(footer);\n    }).bind(this);\n};\nFormData.prototype._lastBoundary = function() {\n    return \"--\" + this.getBoundary() + \"--\" + FormData.LINE_BREAK;\n};\nFormData.prototype.getHeaders = function(userHeaders) {\n    var header;\n    var formHeaders = {\n        \"content-type\": \"multipart/form-data; boundary=\" + this.getBoundary()\n    };\n    for(header in userHeaders){\n        if (userHeaders.hasOwnProperty(header)) {\n            formHeaders[header.toLowerCase()] = userHeaders[header];\n        }\n    }\n    return formHeaders;\n};\nFormData.prototype.setBoundary = function(boundary) {\n    this._boundary = boundary;\n};\nFormData.prototype.getBoundary = function() {\n    if (!this._boundary) {\n        this._generateBoundary();\n    }\n    return this._boundary;\n};\nFormData.prototype.getBuffer = function() {\n    var dataBuffer = new Buffer.alloc(0);\n    var boundary = this.getBoundary();\n    // Create the form content. Add Line breaks to the end of data.\n    for(var i = 0, len = this._streams.length; i < len; i++){\n        if (typeof this._streams[i] !== \"function\") {\n            // Add content to the buffer.\n            if (Buffer.isBuffer(this._streams[i])) {\n                dataBuffer = Buffer.concat([\n                    dataBuffer,\n                    this._streams[i]\n                ]);\n            } else {\n                dataBuffer = Buffer.concat([\n                    dataBuffer,\n                    Buffer.from(this._streams[i])\n                ]);\n            }\n            // Add break after content.\n            if (typeof this._streams[i] !== \"string\" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {\n                dataBuffer = Buffer.concat([\n                    dataBuffer,\n                    Buffer.from(FormData.LINE_BREAK)\n                ]);\n            }\n        }\n    }\n    // Add the footer and return the Buffer object.\n    return Buffer.concat([\n        dataBuffer,\n        Buffer.from(this._lastBoundary())\n    ]);\n};\nFormData.prototype._generateBoundary = function() {\n    // This generates a 50 character boundary similar to those used by Firefox.\n    // They are optimized for boyer-moore parsing.\n    var boundary = \"--------------------------\";\n    for(var i = 0; i < 24; i++){\n        boundary += Math.floor(Math.random() * 10).toString(16);\n    }\n    this._boundary = boundary;\n};\n// Note: getLengthSync DOESN'T calculate streams length\n// As workaround one can calculate file size manually\n// and add it as knownLength option\nFormData.prototype.getLengthSync = function() {\n    var knownLength = this._overheadLength + this._valueLength;\n    // Don't get confused, there are 3 \"internal\" streams for each keyval pair\n    // so it basically checks if there is any value added to the form\n    if (this._streams.length) {\n        knownLength += this._lastBoundary().length;\n    }\n    // https://github.com/form-data/form-data/issues/40\n    if (!this.hasKnownLength()) {\n        // Some async length retrievers are present\n        // therefore synchronous length calculation is false.\n        // Please use getLength(callback) to get proper length\n        this._error(new Error(\"Cannot calculate proper length in synchronous way.\"));\n    }\n    return knownLength;\n};\n// Public API to check if length of added values is known\n// https://github.com/form-data/form-data/issues/196\n// https://github.com/form-data/form-data/issues/262\nFormData.prototype.hasKnownLength = function() {\n    var hasKnownLength = true;\n    if (this._valuesToMeasure.length) {\n        hasKnownLength = false;\n    }\n    return hasKnownLength;\n};\nFormData.prototype.getLength = function(cb) {\n    var knownLength = this._overheadLength + this._valueLength;\n    if (this._streams.length) {\n        knownLength += this._lastBoundary().length;\n    }\n    if (!this._valuesToMeasure.length) {\n        process.nextTick(cb.bind(this, null, knownLength));\n        return;\n    }\n    asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {\n        if (err) {\n            cb(err);\n            return;\n        }\n        values.forEach(function(length) {\n            knownLength += length;\n        });\n        cb(null, knownLength);\n    });\n};\nFormData.prototype.submit = function(params, cb) {\n    var request, options, defaults = {\n        method: \"post\"\n    };\n    // parse provided url if it's string\n    // or treat it as options object\n    if (typeof params == \"string\") {\n        params = parseUrl(params);\n        options = populate({\n            port: params.port,\n            path: params.pathname,\n            host: params.hostname,\n            protocol: params.protocol\n        }, defaults);\n    // use custom params\n    } else {\n        options = populate(params, defaults);\n        // if no port provided use default one\n        if (!options.port) {\n            options.port = options.protocol == \"https:\" ? 443 : 80;\n        }\n    }\n    // put that good code in getHeaders to some use\n    options.headers = this.getHeaders(params.headers);\n    // https if specified, fallback to http in any other case\n    if (options.protocol == \"https:\") {\n        request = https.request(options);\n    } else {\n        request = http.request(options);\n    }\n    // get content length and fire away\n    this.getLength((function(err, length) {\n        if (err && err !== \"Unknown stream\") {\n            this._error(err);\n            return;\n        }\n        // add content length\n        if (length) {\n            request.setHeader(\"Content-Length\", length);\n        }\n        this.pipe(request);\n        if (cb) {\n            var onResponse;\n            var callback = function(error, responce) {\n                request.removeListener(\"error\", callback);\n                request.removeListener(\"response\", onResponse);\n                return cb.call(this, error, responce);\n            };\n            onResponse = callback.bind(this, null);\n            request.on(\"error\", callback);\n            request.on(\"response\", onResponse);\n        }\n    }).bind(this));\n    return request;\n};\nFormData.prototype._error = function(err) {\n    if (!this.error) {\n        this.error = err;\n        this.pause();\n        this.emit(\"error\", err);\n    }\n};\nFormData.prototype.toString = function() {\n    return \"[object FormData]\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/form-data/lib/form_data.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/form-data/lib/populate.js":
/*!*************************************************!*\
  !*** ../node_modules/form-data/lib/populate.js ***!
  \*************************************************/
/***/ ((module) => {

eval("// populates missing values\n\nmodule.exports = function(dst, src) {\n    Object.keys(src).forEach(function(prop) {\n        dst[prop] = dst[prop] || src[prop];\n    });\n    return dst;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2Zvcm0tZGF0YS9saWIvcG9wdWxhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCOztBQUMzQkEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLEdBQUcsRUFBRUMsR0FBRztJQUVoQ0MsT0FBT0MsSUFBSSxDQUFDRixLQUFLRyxPQUFPLENBQUMsU0FBU0MsSUFBSTtRQUVwQ0wsR0FBRyxDQUFDSyxLQUFLLEdBQUdMLEdBQUcsQ0FBQ0ssS0FBSyxJQUFJSixHQUFHLENBQUNJLEtBQUs7SUFDcEM7SUFFQSxPQUFPTDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL3BvcHVsYXRlLmpzP2VjNDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcG9wdWxhdGVzIG1pc3NpbmcgdmFsdWVzXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZHN0LCBzcmMpIHtcclxuXHJcbiAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApXHJcbiAge1xyXG4gICAgZHN0W3Byb3BdID0gZHN0W3Byb3BdIHx8IHNyY1twcm9wXTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGRzdDtcclxufTtcclxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJkc3QiLCJzcmMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInByb3AiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/form-data/lib/populate.js\n");

/***/ })

};
;